# todo - print directory todos upon directory change

function todo() {
    # Test for utilities and load modules
    command -v getopt &> /dev/null || { printf "Error: %s: %s\n" "$FUNCNAME" "missing utility 'getopt'" >&2; return 1 ; }
    getopt -T &> /dev/null
    (( $? == 4 )) || { printf "Error: %s: %s\n" "$FUNCNAME" "your getopt version is too old, get the enhanced getopt from util-linux!" >&2; return 1; }

    # Define constants
    local version=0.1
    local todo_filename="${TODO_FILENAME:-TODO}"
    local todo_print_titlecolor='\E[01;37m'
    local todo_print_bulletcolor='\E[01;33m'
    local default_color='\E[00m'

    # Parse arguments
    local getopt                # 'local var=$(command)' mangles the return code of $(command)
    getopt="$(getopt -n "$FUNCNAME" -l help,version -o +hV -- "$@")"
    (( $? != 0 )) && return 1
    eval set -- "$getopt"
    local action
    while true
    do
        case "$1" in
            -h|--help)
                cat <<- _EOF_
				  Usage: $FUNCNAME [generic options] [action] [action options]
				
				Control the TODO Bash module.
				
				Generic options:
				    -h|--help       print this help
				    -V|--version    print the version number
				
				Actions:            (default: print)
				    on|off|toggle   enable/disable/toggle auto-print of a
				                    directory's TODO file upon \`cd\`
				    p|print         print the TODO for the current directory
				    status          display status information
				
				'on'/'off'/'toggle' options:
				    -q|--quiet      don't display the new auto-print status
				
				'print' options:
				    -q|--quiet      don't display an error message if the
				                    directory contains no TODO file
				
				Environment variables:
				  TODO_FILENAME     TODO filename (default: TODO, current: $todo_filename)
				_EOF_

                return 0
                ;;
            -V|--version)
                echo "$FUNCNAME version $version"
                return 0
                ;;
            --)
                shift
                action="$1"
                shift
                break
                ;;
            *)
                printf "Error: %s: %s\n" "$FUNCNAME" "internal error!" >&2
                return 1
                ;;
        esac
        shift
    done

    # Execute action
    case "$action" in
        "on"|"off"|"toggle")
            # Parse options
            getopt="$(getopt -n "$FUNCNAME" -l quiet -o +q -- "$@")"
            (( $? != 0 )) && return 1
            eval set -- "$getopt"
            local quiet=false
            while true
            do
                case "$1" in
                    -q|--quiet) quiet=true ;;
                    --)
                        shift
                        break
                        ;;
                    *)
                        printf "Error: %s: %s\n" "$FUNCNAME" "internal error!" >&2
                        return 1
                        ;;
                esac
                shift
            done
            (( $# == 0 )) || { printf "Error: %s: %s\n" "$FUNCNAME" "too many arguments" >&2; return 1; }

            # Resolve the 'toggle' action
            [[ "$action" == "toggle" ]] && { [[ "$(type -t cd)" == "function" ]] && action=off || action=on ; }

            # Set auto-print
            case "$action" in
                "on")
                    # Install a `cd` wrapper
                    function cd() {
                        # Change directory and print any TODOs in the new directory
                        local rc
                        builtin cd "$@"
                        rc=$?
                        (( $rc == 0 )) && todo print -q
                        return $rc
                    }
                    ;;

                "off")
                    # Remove the `cd` wrapper
                    [[ "$(type -t cd)" == "function" ]] && unset -f cd
                    ;;
            esac
            $quiet || echo "auto-print: $action"
            ;;

        ""|"p"|"print")
            # Parse options
            getopt="$(getopt -n "$FUNCNAME" -l quiet -o +q -- "$@")"
            (( $? != 0 )) && return 1
            eval set -- "$getopt"
            local quiet=false
            while true
            do
                case "$1" in
                    -q|--quiet) quiet=true ;;
                    --)
                        shift
                        break
                        ;;
                    *)
                        printf "Error: %s: %s\n" "$FUNCNAME" "internal error!" >&2
                        return 1
                        ;;
                esac
                shift
            done
            (( $# == 0 )) || { printf "Error: %s: %s\n" "$FUNCNAME" "too many arguments" >&2; return 1; }

            # Print the TODO
            local print_failed=false
            if [[ -f "./$todo_filename" ]]
            then
                if ! echo "$(file -L "./$todo_filename")" | grep -q "XML"    # 'tudu' uses XML todos, rule those out
                then
                    echo
                    echo -e "   ${todo_print_titlecolor}TODO:${defaultcolor}"
                    echo
                    echo -e "$(sed -e "s/^\\([[:blank:]]*\\*\\+\\)/${todo_print_bulletcolor//\\/\\\\}\1${default_color//\\/\\\\}/" "./$todo_filename")"
                    echo
                else
                    print_failed=true
                fi
            else
                print_failed=true
            fi

            # Print a failure message
            $print_failed && ! $quiet && echo "No valid TODO in the current directory!"
            ;;

        "status")
            # Parse options
            (( $# == 0 )) || { printf "Error: %s: %s\n" "$FUNCNAME" "too many arguments" >&2; return 1; }

            # Display status information
            local status
            [[ "$(type -t cd)" == "function" ]] && status=on || status=off
            echo "auto-print: $status"
            ;;

        *)
            printf "Error: %s: %s\n" "$FUNCNAME" "unknown action '$action'" >&2
            return 1
            ;;
    esac
}

# vim: ft=bash
