# path - manipulate path environment variables

# Enable extended globbing, never disable it (why was it disabled in the first place anyway?)
shopt -s extglob


function path() {
    # No argument: display help
    if (( $# < 1 ))
    then
        cat <<-EOF
		  Usage: $FUNCNAME <action> [options] <variable> [DIRS]
		Manipulate path-like environment variables.
		
		Any variable with a name ending in PATH may be altered.
		Common path variables are aliased to short names (e.g. bin -> PATH,
		lib -> LD_LIBRARY_PATH) for ease of use. These aliases are listed
		below.
		By default, the 'show' action only lists aliased variables. However
		each time a non-default variable is altered or shown, it is remembered
		and will be displayed upon the next 'show'.
		
		Actions:
		  show            print the path (default action)
		  append          append DIRS to the path
		  prepend         prepend DIRS to the path
		  strip           strip DIRS from the path
		
		Generic options:
		  -e|--export     export the environment variable
		  -f|--force      stop complaining about variable names not ending in PATH
		  -n|--dry-run    don't actually alter the environment variable
		                  (most useful with -v)
		  -v|--verbose    print the resulting path
		  -C|--nocolor    don't colorize output
		
		Specific options for action 'show':
		  -r|--reset      forget non-default variables
		
		Specific options for action 'strip':
		  -g|--glob       also strip when only part of an entry is matched
		
		Path variables:
		  bin   ->  PATH
		  lib   ->  LD_LIBRARY_PATH
		  pkc   ->  PKG_CONFIG_PATH
		  inc   ->  C_INCLUDE_PATH
		            CPLUS_INCLUDE_PATH
		  man   ->  MANPATH
		  *PATH ->  itself
		  '*'   ->  all variables listed by 'show'
		EOF
        return
    fi
    local black='\E[0m'           # Not real black: default setting, in fact
    local green='\E[1;32;32m'     # Bold green color

    # Important note: since we're working with paths, the script must be kept pure-bash
    #                 wouldn't want to depend on something like 'sed' when
    #                 the user strips "/usr/bin" from its path

    # Enable extended globbing *again* (in case it was malevolently disabled)
    shopt -s extglob

    # Get action from arguments
    local selected_action="$1"
    local -a actions=
    case "$selected_action" in
        show|strip)
            actions=("$selected_action")
            ;;

        append|prepend)
            # Add 'strip' action before 'prepend' or 'append' to make sure DIRS are not in the path anymore
            actions=(strip "$selected_action")
            ;;

        *)
            echo "Error: unknown action '$selected_action'!" >&2
            return 1
            ;;
    esac
    shift

    # Parse options
    local export=0
    local force=0
    local dryrun=0
    local glob=0
    local reset=0
    local verbose=0
    local opts_done=0
    until (( $opts_done ))
    do
        # Extract option
        local option='ERROR'
        case "$1" in
            # Long option
            --*)
                # Extract the option name
                option="${1:2}"
                shift
                ;;

            # Short option
            -*)
                # Test for empty option
                if [[ "$1" == "-" ]]
                then
                    echo "Error: empty option flag '$1'!" >&2
                    return 1
                fi

                # Extract the option short name
                option="${1:1:1}"
                # Test if any options are left
                if [[ -z "${1:2}" ]]
                then
                    # No more options here: shift
                    shift
                else
                    # Reset the positional parameters without the current option
                    set - "-${1:2}" "${@:2}"
                    # Don't shift yet
                fi
                ;;

            # Not an option
            *)
                option=
                ;;
        esac

        # Process option
        case "$option" in
            e|export)
                export=1
                ;;

            f|force)
                force=1
                ;;

            n|dry-run)
                dryrun=1
                ;;

            g|glob)
                glob=1
                [[ "$selected_action" != "strip" ]] && { echo "Error: invalid option '$option' for action '$selected_action'!" >&2 ; return 1 ; }
                ;;

            C|nocolor)
                black=
                green=
                ;;

            r|reset)
                reset=1
                [[ "$selected_action" != "show" ]] && { echo "Error: invalid option '$option' for action '$selected_action'!" >&2 ; return 1 ; }
                ;;

            v|verbose)
                verbose=1
                ;;

            "")
                opts_done=1
                ;;

            *)
                echo "Error: unkown option '$option'!" >&2
                return 1
                ;;
        esac
    done

    # Get target path variable
    local -a targets=
    if [[ "$selected_action" == "show" && -z "$1" ]]
    then
        # Show action with no path specified: show all path variables (including custom ones, except if reset)
        (( $reset )) && unset PATH_CUSTOM_VARIABLES
        targets=(PATH LD_LIBRARY_PATH PKG_CONFIG_PATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH MANPATH "${PATH_CUSTOM_VARIABLES[@]}")
    else
        case "$1" in
            bin)
                targets=(PATH)
                ;;

            lib)
                targets=(LD_LIBRARY_PATH)
                ;;

            pkc)
                targets=(PKG_CONFIG_PATH)
                ;;

            inc)
                targets=(C_INCLUDE_PATH CPLUS_INCLUDE_PATH)
                ;;

            man)
                targets=(MANPATH)
                ;;

            *([[:word:]]))
                # Custom path variable: look for it in the list of custom path variables
                local found=
                local k
                for k in "${!PATH_CUSTOM_VARIABLES[@]}"
                do
                    # Found it
                    [[ "${PATH_CUSTOM_VARIABLES[$k]}" == "$1" ]] && { found="$k" ; break ; }
                done

                # Check that its name ends in PATH, unless forced or already present
                [[ $force -eq 0 && -z "$found" && "${1: -4}" != "PATH" ]] && { echo "Error: invalid path variable '$1'!" >&2 ; return 1 ; }

                # Register the target as itself
                targets=($1)

                # If found, forget this variable if the --reset option has been given
                [[ -n "$found" && $reset -eq 1 ]] && unset PATH_CUSTOM_VARIABLES[$found]
                # Otherwise, remember the variable for later display with 'show'
                [[ -z "$found" ]] && PATH_CUSTOM_VARIABLES+=("${targets[@]}")
                ;;

            '*')
                targets=(PATH LD_LIBRARY_PATH PKG_CONFIG_PATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH MANPATH "${PATH_CUSTOM_VARIABLES[@]}")
                ;;

            *)
                echo "Error: invalid path variable '$1'!" >&2
                return 1
                ;;
        esac
    fi
    shift

    # If dry-running, render all path modifications local
    if (( $dryrun ))
    then
        local t
        for t in "${targets[@]}"
        do
            eval local $t="\${!t}"
        done
    fi

    # Process actions
    local a
    for a in "${actions[@]}"
    do
        case "$a" in
            # Show: force verbose
            show)
                verbose=1
                ;;

            # Append|Prepend: add DIRS to the specified path variable
            append|prepend)
                # Build new path directories list (stripping trailing /s)
                [[ -z "$1" ]] && { echo "Error: empty directory path in DIRS!" >&2 ; return 1 ; }
                local newpath="${1%%+(/)}"
                shift
                local d
                for d in "$@"
                do
                    [[ -z "$d" ]] && { echo "Error: empty directory path in DIRS!" >&2 ; return 1 ; }
                    newpath="$newpath:${d%%+(/)}"
                done

                # Add new path directories list
                local t
                for t in "${targets[@]}"
                do
                    # If ${!t} is set, prepend/append it with a colon, otherwise just set it to the new path
                    if [[ "$a" == "append" ]]
                    then
                        eval $t="\${!t:+\${!t}:}\$newpath"
                    else
                        eval $t="\$newpath\${!t:+:\${!t}}"
                    fi
                done
                ;;

            # Strip: remove DIRS from the specified path variable
            strip)
                local t
                for t in "${targets[@]}"
                do
                    # Trick: wrap the path in ':' and replace inner ':' with '::'
                    local temppath=":${!t//:/::}:"

                    # Strip directories
                    local d
                    for d in "$@"
                    do
                        # String remove ':DIR:' (that's why we need the enclosing ':' above ;
                        # the '::' are needed so that consecutive matching entries are also caught)
                        # (also strip trailing /s in DIR)
                        local pattern=":${d%%+(/)}:"
                        (( $glob )) && pattern=":*([!:])$d*([!:]):"
                        temppath="${temppath//$pattern/}"
                    done

                    # Reverse trick: unwrap the path, replace inner '::' with ':'
                    temppath="${temppath//::/:}"
                    temppath="${temppath#:}"
                    temppath="${temppath%:}"

                    # Assign the new path
                    eval $t="\$temppath"
                done
                ;;
        esac
    done

    # Export the variables
    if (( $export ))
    then
        local t
        for t in "${targets[@]}"
        do
            export $t
        done
    fi

    # Be verbose
    if (( $verbose ))
    then
        local t
        for t in "${targets[@]}"
        do
            echo -e "${green}$t = ${black}${!t}"
        done
    fi
}

# vim: ft=bash
