# urlencode - encode special characters in a string so that it may be used in a URL
# urldecode - decode special characters in a URL
#
# Credits go to Orwellophile @ http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script

urlencode() {
    local str

    if [[ -v 1 ]]; then
        str="$1"
    else
        # Read stdin without stripping trailing newlines
        IFS='' read -d '' -r str
    fi

    local strlen=${#str}
    local url=""

    # Loop over the string
    local pos
    for (( pos=0 ; pos<strlen ; pos++ )); do
        local o
        local c="${str:$pos:1}"
        case "$c" in
            [-_.~a-zA-Z0-9])
                o="$c"
                ;;

            *)
                printf -v o '%%%02x' "'$c"
                ;;
        esac
        url+="$o"
    done

    printf '%s' "$url"
}


urldecode() {
    local url

    if [[ -v 1 ]]; then
        url="$1"
    else
        # Read stdin without stripping trailing newlines
        IFS='' read -d '' -r url
    fi

    # This is perhaps a risky gambit, but since all escape characters must be
    # encoded, we can replace %NN with \xNN and pass the lot to printf %b, which
    # will decode hex for us
    printf '%b' "${url//%/\\x}"
}

# vim: ft=bash
