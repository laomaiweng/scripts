#!/bin/bash
# ssh-agent-test - test for a running SSH agent
# ssh-agent-fix-firejail-pid - fix the PID written by a Firejail'ed SSH agent to its environment file
# ssh-agent-add-session-keys - add session keys (those in ~/.ssh/session-keys.d) to the SSH agent
# ssh-agent-respawn - restart the SSH agent (with or without Firejail)


# Default lifetime of keys added to the agent
export SSH_AGENT_LIFETIME=8h


ssh-agent-test() {
    (( $# == 1 )) || { echo "Usage: $FUNCNAME <env-file>" >&2; return 1; }

    local ssh_agent_envfile="$1"

    # Test for the env file
    [[ -f "$ssh_agent_envfile" ]] || return 1

    # Source env file
    source "$ssh_agent_envfile" &>/dev/null
    # Test the agent
    ssh-add -l &>/dev/null
    (( $? != 2 )) || return 1

    # All checks passed: valid agent
    return 0
}


ssh-agent-fix-firejail-pid() {
    (( $# == 1 )) || { echo "Usage: $FUNCNAME <env-file>" >&2; return 1; }

    # Checks
    local ssh_agent_envfile="$1"
    [[ -f "$ssh_agent_envfile" ]] || { echo "Error: $FUNCNAME: no such env-file: $ssh_agent_envfile"; return 1; }
    [[ -S "$SSH_AUTH_SOCK" ]] || { echo "Error: $FUNCNAME: bad agent socket: $SSH_AUTH_SOCK"; return 1; }
    [[ "$(readlink "$(command -v ssh-agent)")" == */firejail ]] || { echo "Error: $FUNCNAME: only designed to operate with Firejail'ed ssh-agent"; return 1; }

    # Get the agent's PID (last one in the `--tree` output; $(()) strips leading whitespace)
    local ssh_agent_pid=$(( $(firejail --tree | grep -F "$SSH_AUTH_SOCK" | cut -d: -f1 | tail -n1) ))
    (( ssh_agent_pid )) || { echo "Error: $FUNCNAME: unable to determine agent PID"; return 1; }

    # Substitute it in the envfile
    sed -e 's/^SSH_AGENT_PID=[0-9]\+;/SSH_AGENT_PID='"$ssh_agent_pid"';/' -e 's/Agent pid [0-9]\+/Agent pid '"$ssh_agent_pid"'/' -i "$ssh_agent_envfile"

    # Fix it in the environment
    export SSH_AGENT_PID="$ssh_agent_pid"
}


ssh-agent-add-session-keys() {
    # Save current state of nullglob shell option, then enable it
    shopt -q nullglob
    local _nullglob=$?
    shopt -s nullglob

    # Add all keys in ~/.ssh/session-keys.d, as the pam_ssh session management module does
    ssh-add -t 365d ~/.ssh/session-keys.d/*

    # Restore nullglob
    (( _nullglob )) && shopt -u nullglob
}


ssh-agent-respawn() {
    (( $# == 1 )) || { echo "Usage: $FUNCNAME <env-file>" >&2 ; return 1 ; }

    local ssh_agent_envfile="$1"

    # Kill all existing agents for the current user (we can't use `ssh-agent -k` because SSH_AGENT_PID may not be set,
    # and ssh-agent runs in Firejail anyway and can't kill anything outside of its jail)
    pkill -u "$USER" ssh-agent
    # /!\ `killall ssh-agent` doesn't work: for some reason, it can't find any running ssh-agent processes

    # Now start the agent
    # If Firejail is involved, we'll need to use some tricks
    if [[ "$(readlink "$(command -v ssh-agent)")" != */firejail ]]; then
        # No Firejail in sight, we should be safe just running the agent
        ssh-agent -t "$SSH_AGENT_LIFETIME" -s >"$ssh_agent_envfile"
        source "$ssh_agent_envfile"
    else
        # So we're going to be running under Firejail, which doesn't behave well with ssh-agent (see netblue30/firejail#1616)
        # We need to do things a bit differently:
        # * create a temporary directory for the agent socket
        # * start the agent (under Firejail), passing in the temporary directory, and have Bash background it
        #   NB: using `ssh-agent -D` somehow doesn't work, as the process gets killed when the shell that spawned it exits;
        #       however we don't really need `-D` since Firejail already prevents ssh-agent from backgrounding itself
        # * export SSH_AUTH_SOCK and SSH_AGENT_PID
        # This way, we control the socket's location, and don't need to rely on the envfile which may not be available
        # (since we background ssh-agent ourselves). However, we still create the envfile, for other shells to use.
        local ssh_agent_socket  # don't assign yet, it would mangle the return code of mktemp
        ssh_agent_socket="$(mktemp -d --tmpdir ssh-XXXXXXXXXX)/S.ssh-agent" || { echo "Error: $FUNCNAME: mktemp"; return 1; }
        ssh-agent -a "$ssh_agent_socket" -t "$SSH_AGENT_LIFETIME" -s >"$ssh_agent_envfile" & disown -r $!
        export SSH_AUTH_SOCK="$ssh_agent_socket" SSH_AGENT_PID="$!"

        # An issue remains in that the envfile will hold the PID of ssh-agent in its Firejail PID namespace, which is pretty
        # much useless when it comes to killing the agent (from another shell that doesn't have the above SSH_AGENT_PID).
        # So we must find out the PID of the child Firejail process or the agent (but not the parent Firejail process, which
        # will die when this shell exits), and drop it in the envfile once the agent is running. We do all of this only once
        # the agent is running, since before that Firejail may not have had any time to even just fully spawn yet (because &).
        # We resort to polling in the background to wait for the agent to come up, which is fine since we already have all
        # we need for our current shell's environment.
        (
            for ((i=0; i<10; i++)); do
                if ssh-agent-test "$ssh_agent_envfile"; then
                    # Agent is up! Fix the PID in the envfile
                    ssh-agent-fix-firejail-pid "$ssh_agent_envfile"
                    exit 0
                fi
                sleep 1
            done
            echo "Warning: $FUNCNAME: ssh-agent still unreachable after 10 attempts"
            exit 1
        ) & disown
        # NB: if the current shell dies before this background job completes, the envfile will retain the namespaced PID. That's life.
    fi

    return 0
}
