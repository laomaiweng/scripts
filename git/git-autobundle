#!/bin/bash

error() {
    echo "error: $*"
} >&2

warning() {
    echo "warning: $*"
} >&2

die() {
    local rc=$?
    error "$*"
    exit $rc
} >&2

join_by() { local IFS="$1"; shift; echo "$*"; }

join_path() {
    local -a components=()
    for p in "$@"; do
        [[ -n "$p" ]] && components+=("$p")
    done
    join_by / "${components[@]}"
}

usage() {
    local -i rc=$1
    echo "usage: git autobundle [options] <repo> [<bundle>]

options:
  -x | --directories    create the bundle under a hierarchy of directories matching the remote repository path
  -P | --prefix DIR     create the bundle (and hierarchy if used with -x) under the provided path"
    exit $rc
} >&2

getopt -T &> /dev/null
(( $? != 4 )) && die "bad getopt"
getopt="$(getopt -n "${0##*/}" -l directories,prefix:,help -o +xP:h -- "$@")" || exit $?
eval set -- "$getopt"

use_directories=false
use_prefix=false
prefix=

while true; do
    case "$1" in
        -x|--directories) use_directories=true ;;
        -P|--prefix) use_prefix=true; prefix="${2:-.}"; shift ;;
        -h|--help) usage 0 ;;
        --) shift; break ;;
        *) die "internal error" ;;
    esac
    shift
done

if [[ -z "$1" ]]; then
    error "missing <repo>"
    usage 1
fi

shopt -s extglob

repo="${1%%+(/)}"  # strip trailing /s
base="${repo##*/}"
base="${base%.git}"

bundle="$2"
[[ -n "$bundle" ]] || bundle="$base".git
if [[ "${bundle:0:1}" == / ]]; then
    # absolute bundle path, don't alter it
    $use_directories || $use_prefix && warning "absolute path provided for bundle, ignoring --directories/--prefix"
    abs_bundle=$bundle
else
    # relative bundle path, construct its absolute path
    dirs=()

    $use_prefix && dirs+=("$prefix")

    if $use_directories; then
        path="${repo%/*}"
        if [[ "$path" == *://* ]]; then
            path="${path#*://}"  # strip protocol
        else
            # XXX: this assumes ssh
            path="${path/://}"   # turn : after host into /
        fi
        dirs+=("$path")
    fi

    bundle="$(join_path "${dirs[@]}" "$bundle")"
    abs_bundle="$PWD/$bundle"
fi
clone="$(mktemp -d --tmpdir "autobundle.$base.XXXXXX")"
trap 'rm -rf "$clone"' EXIT

git clone --bare "$repo" "$clone" || die "git clone failed"
mkdir -p "${abs_bundle%/*}" || die "mkdir failed"
(cd "$clone" && git bundle create "$abs_bundle" --all) || die "git bundle failed"
echo "Bundle created: $bundle"
rm -rf "$clone" || die "cleanup failed"
